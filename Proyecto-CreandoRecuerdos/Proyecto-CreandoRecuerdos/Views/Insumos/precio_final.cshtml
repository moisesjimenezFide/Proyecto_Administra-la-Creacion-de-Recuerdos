@model Proyecto_CreandoRecuerdos.Models.InsumosModel

@{
    ViewData["Title"] = "Creando Recuerdos - Gestión de Precios Finales Sugeridos de Productos Finales";
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool editando = ViewBag.Editando ?? false;
    string titulo = editando ? "Edición de Producto Final" : "Registro de Producto Final";
    string textoBoton = editando ? "Actualizar" : "Agregar";
    string accion = editando ? "EditarProductoFinal" : "precio_final";

}

@section Styles {
    <link href="~/Templates/css/menu.css" rel="stylesheet" />
    <style>
        label.form-label {
            font-weight: bold;
        }

        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .table th {
            font-size: 1rem;
            font-weight: bold;
        }

        .table th, .table td {
            min-width: 120px;
            white-space: nowrap;
            word-break: break-word;
            padding: 0.5rem;
            vertical-align: middle;
            font-size: 0.95rem;
        }

        .btn-sm {
            font-size: 0.8rem;
            padding: 0.3rem 0.6rem;
        }

        .btn {
            font-size: 0.9rem;
            padding: 0.25rem 0.5rem;
        }

        .btn-custom-pink {
            background-color: #E27AB0;
            color: white;
            border: none;
        }

            .btn-custom-pink:hover {
                background-color: #d66da3;
                color: white;
            }
    </style>
}

<div class="container my-5 text-center">
    <h2 class="mb-4" style="font-family: 'Sono';">
        <i class="fas fa-calculator me-2"></i>Gestión de Precios Finales Sugeridos de Productos Finales
    </h2>
</div>

<!-- Formulario de búsqueda -->
<form method="get" action="@Url.Action("precio_final", "Insumos")" class="container mt-4">
    <div class="input-group mb-4">
        <input type="text" name="search" class="form-control" placeholder="Buscar por cualquier campo..." value="@ViewBag.Search" />
        <button type="submit" class="fas fa-search ms-1 btn btn-custom-pink"></button>
    </div>
</form>

<!-- Formulario de registro/edición -->
<div class="container">
    <h4 class="mb-3"><strong>@titulo</strong></h4>
    @using (Html.BeginForm("precio_final", "Insumos", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="mb-3 text-start">
            <label for="margen_de_utilidad" class="form-label">Margen de margen_de_utilidad (%)</label>
            <input type="number" name="margen_de_utilidad" id="margen_de_utilidad" class="form-control" required="required" />
        </div>

        <div class="mb-3 text-start">
            <label for="plataforma_de_envio" class="form-label">Plataforma de Envío</label>
            <select name="plataforma_de_envio" id="plataforma_de_envio" class="form-control" required="required">
                <option value="">Seleccione una plataforma de envío</option>
                <option value="Propio" @(editando && Model.ProductoFinalEditado?.plataforma_de_envio == "Propio" ? "selected" : "")>Propio</option>
                <option value="PedidosYa" @(editando && Model.ProductoFinalEditado?.plataforma_de_envio == "PedidosYa" ? "selected" : "")>PedidosYa</option>
                <option value="Rappi" @(editando && Model.ProductoFinalEditado?.plataforma_de_envio == "Rappi" ? "selected" : "")>Rappi</option>
                <option value="DidiFood" @(editando && Model.ProductoFinalEditado?.plataforma_de_envio == "DidiFood" ? "selected" : "")>DidiFood</option>
                <option value="UberEats" @(editando && Model.ProductoFinalEditado?.plataforma_de_envio == "UberEats" ? "selected" : "")>UberEats</option>
            </select>
        </div>

        <h4>Empaques y/o Decoraciones Utilizados(as)</h4>
        <div id="empaques_decoraciones-container">
            <div class="row fila-insumo template-empaque_decoracion" style="display: none;">
                <div class="col-md-4">
                    <label for="EmpaqueDecoracionSeleccionado">Nombre</label>
                    @Html.DropDownList("EmpaqueDecoracionSeleccionado", ViewBag.EmpaquesDecoraciones as SelectList, "Seleccione un empaque o decoración", new { @class = "form-control" })
                </div>
                <div class="col-md-3">
                    <label for="CantidadEmpaqueDecoracion">Cantidad</label>
                    <input type="number" name="CantidadEmpaqueDecoracion" placeholder="Cantidad" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label for="UnidadEmpaqueDecoracion">Unidad de medida</label>
                    <input type="text" name="UnidadEmpaqueDecoracion" placeholder="Unidad de medida" class="form-control" />
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-danger" onclick="eliminarFila(this)">Eliminar</button>
                </div>
            </div>
            <button type="button" class="btn btn-custom-pink mt-2" onclick="agregarFila('empaques_decoraciones-container', 'template-empaque_decoracion')">+ Agregar Empaque</button>
        </div>
        <br />

        <h4>Implementos Utilizados</h4>
        <div id="implementos-container">
            <div class="row fila-insumo template-implemento" style="display: none;">
                <div class="col-md-4">
                    <label for="ImplementoSeleccionado">Nombre</label>
                    @Html.DropDownList("ImplementoSeleccionado", ViewBag.Implementos as SelectList, "Seleccione un implemento", new { @class = "form-control" })
                </div>
                <div class="col-md-3">
                    <label for="CantidadImplemento">Cantidad</label>
                    <input type="number" name="CantidadImplemento" placeholder="Cantidad" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label for="UnidadImplemento">Unidad de medida</label>
                    <input type="text" name="UnidadImplemento" placeholder="Unidad de medida" class="form-control" />
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-danger" onclick="eliminarFila(this)">Eliminar</button>
                </div>
            </div>
            <button type="button" class="btn btn-custom-pink mt-2" onclick="agregarFila('implementos-container', 'template-implemento')">+ Agregar Implemento</button>
        </div>
        <br />

        <h4>Suministros de Limpieza e Higiene Utilizados</h4>
        <div id="suministros-container">
            <div class="row fila-insumo template-suministro" style="display: none;">
                <div class="col-md-4">
                    <label for="SuministroSeleccionado">Nombre</label>
                    @Html.DropDownList("SuministroSeleccionado", ViewBag.Suministros as SelectList, "Seleccione un suministro", new { @class = "form-control" })
                </div>
                <div class="col-md-3">
                    <label for="Cantidadsuministro">Cantidad</label>
                    <input type="number" name="Cantidadsuministro" placeholder="Cantidad" class="form-control" />
                </div>
                <div class="col-md-3">
                    <label for="Unidadsuministro">Unidad de medida</label>
                    <input type="text" name="Unidadsuministro" placeholder="Unidad de medida" class="form-control" />
                </div>

                <div class="col-md-2">
                    <button type="button" class="btn btn-danger" onclick="eliminarFila(this)">Eliminar</button>
                </div>
            </div>
            <button type="button" class="btn btn-custom-pink mt-2" onclick="agregarFila('suministros-container', 'template-suministro')">+ Agregar Suministro</button>
        </div>
        <br />

        <div class="d-flex justify-content-end gap-2">
            <button type="reset" class="btn btn-danger">Cancelar</button>
            <button type="submit" class="btn btn-custom-pink">@textoBoton</button>
        </div>
    }
</div>

<!-- Listado -->
<div class="container">
    <h4><strong>Listado de Productos Finales</strong></h4>

    @if (Model.ProductosFinales == null || Model.ProductosFinales.Count == 0)
    {
        <div class="alert alert-info text-center" style="margin: 1rem 0;">
            @if (!string.IsNullOrEmpty(ViewBag.Search as string))
            {
                <span>No se encontraron coincidencias.</span>
            }
            else
            {
                <span>No hay productos finales registrados.</span>
            }
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-bordered table-striped table-sm text-start">
                <thead>
                    <tr>
                        <th>Nombre de Receta</th>
                        <th>Costo Total de Receta (₡)</th>
                        <th>Margen de margen_de_utilidad (%)</th>
                        <th>Costo sin Margen de margen_de_utilidad (₡)</th>
                        <th>Costo con Margen de margen_de_utilidad (₡)</th>
                        <th>Empaques y/o Decoraciones Utilizados(as)</th>
                        <th>Costo Empaques y/o Decoraciones (₡)</th>
                        <th>Implementos utilizados</th>
                        <th>Costo Implementos (₡)</th>
                        <th>Suministros de Liempieza e Higiene Utilizados</th>
                        <th>Costo suministros (₡)</th>
                        <th>IVA (%)</th>
                        <th>Servicio (%)</th>
                        <th>Envío (₡)</th>
                        <th>Precio Final (₡)</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var productofinal in Model.ProductosFinales)
                    {
                        <tr>
                            <td>@productofinal.nombre_receta</td>
                            <td>@productofinal.costo_total_receta.ToString("₡")</td>
                            <td>@productofinal.margen_de_utilidad</td>
                            <td>@productofinal.costo_sin_margen_de_utilidad.ToString("₡")</td>
                            <td>@productofinal.costo_con_margen_de_utilidad.ToString("₡")</td>
                            <td>
                                @foreach (var empaque_decoracion in productofinal.EmpaquesUtilizados)
                                {
                                    <div>@empaque_decoracion.nombre (@empaque_decoracion.cantidad @empaque_decoracion.unidad_de_medida)</div>
                                }
                            </td>
                            <td>@productofinal.costo_empaque_decoracion_utilizado.ToString("₡")</td>
                            <td>
                                @foreach (var implemento in productofinal.ImplementosUtilizados)
                                {
                                    <div>@implemento.nombre (@implemento.cantidad @implemento.unidad_de_medida)</div>
                                }
                            </td>
                            <td>@productofinal.costo_implemento_utilizado.ToString("₡")</td>
                            <td>
                                @foreach (var suministro in productofinal.SuministrosUtilizados)
                                {
                                    <div>@suministro.nombre (@suministro.cantidad @suministro.unidad_de_medida)</div>
                                }
                            </td>
                            <td>@productofinal.costo_suministro_utilizado.ToString("₡")</td>
                            <td>@productofinal.iva.ToString("₡")</td>
                            <td>@productofinal.impuesto_de_servicio.ToString("₡")</td>
                            <td>@productofinal.envio.ToString("₡")</td>
                            <td><strong>@productofinal.precio_final_sugerido.ToString("₡")</strong></td>
                            <td>
                                <a href="@Url.Action("EditarProductoFinal", "Insumos", new { id = productofinal.id })" class="btn btn-custom-pink btn-sm">Editar</a>
                                <a href="@Url.Action("EliminarProductoFinal", "Insumos", new { id = productofinal.id })" class="btn btn-danger btn-sm btn-eliminar" data-url="@Url.Action("EliminarProductoFinal", "Insumos", new { id = productofinal.id })">Eliminar</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@section Scripts {
    <script>
        @if (TempData["SuccessMessage"] != null)
        {
           <text>
            Swal.fire({
                icon: 'success',
                text: '@TempData["SuccessMessage"]',
                confirmButtonColor: '#E27AB0'
            });
           </text>
        }

        $(document).on('click', '.btn-eliminar', function (e) {
            e.preventDefault();
            var url = $(this).data('url');

            Swal.fire({
                title: '¿Estás seguro?',
                text: "¡Esta acción no se puede deshacer!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#E27AB0',
                cancelButtonColor: '#e74c3c',
                confirmButtonText: 'Aceptar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = url;
                }
            });
        });
    </script>
    <script>

        $('form').on('submit', function (e) {
            var valido = true;
            var mensaje = "";

            // Validar campos de texto
            $(this).find('input[type="text"]').each(function () {
                var valor = $(this).val();
                if (!valor || valor.trim().length === 0) {
                    valido = false;
                    mensaje = "No se permiten campos de texto vacíos o solo espacios en blanco.";
                    $(this).focus();
                    return false;
                }
            });

            // Validar campos numéricos
            if (valido) {
                $(this).find('input[type="number"]').each(function () {
                    var valor = $(this).val();
                    if (!/^\d+(\.\d+)?$/.test(valor) || parseFloat(valor) <= 0) {
                        valido = false;
                        mensaje = "Los campos numéricos deben ser mayores a cero y solo aceptar números positivos.";
                        $(this).focus();
                        return false;
                    }
                });
            }

            // Validar nombre duplicado
            var nombre = $('#nombre').val().toLowerCase();
            var id = $('#id').val();
            if (nombresExistentes.includes(nombre)) {
                valido = false;
                mensaje = "Ya existe un producto final con ese nombre.";
                $('#nombre').focus();
            }

            if (!valido) {
                e.preventDefault();
                Swal.fire({
                    icon: 'error',
                    title: 'Validación',
                    text: mensaje,
                    confirmButtonText: 'Aceptar',
                    confirmButtonColor: '#E27AB0'
                });
                return false;
            }

            e.preventDefault();
            var data = $(this).serialize();
            $.post($(this).attr('action'), data)
                .done(function () { location.reload(); })
                .fail(function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error al guardar en la base de datos',
                        confirmButtonText: 'Aceptar',
                        confirmButtonColor: '#E27AB0'
                    });
                });
        });

        // Catálogos para cálculos en JS
        var recetas = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.CostosRecetas?.Select(r => new { r.nombre, r.costo_total_receta })));
        var empaques = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.EmpaquesDecoraciones?.Select(e => new { e.nombre, e.costo_por_cantidad })));
        var implementos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Implementos?.Select(i => new { i.nombre, i.costo_por_cantidad })));
        var suministros = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Suministros?.Select(s => new { s.nombre, s.costo_por_cantidad })));

        function obtenerCostoReceta(nombre) {
            var found = recetas.find(x => x.nombre === nombre);
            return found ? parseFloat(found.costo_total_receta) : 0;
        }

        function obtenerCostoUnitario(nombre, catalogo) {
            var found = catalogo.find(x => x.nombre === nombre);
            return found ? parseFloat(found.costo_por_cantidad) : 0;
        }

        function calcularTotalesPorInsumo(container, catalogo, cantidadName, selectName) {
            var total = 0;
            $(container + ' .fila-insumo:not([style*="display: none"])').each(function () {
                var nombre = $(this).find('select[name="' + selectName + '"]').val();
                var cantidad = parseFloat($(this).find('input[name="' + cantidadName + '"]').val()) || 0;
                var costoUnitario = obtenerCostoUnitario(nombre, catalogo);
                total += cantidad * costoUnitario;
            });

            return total;
        }

        function calcularPrecioFinal() {
            var nombreReceta = $('#nombre_receta').val();
            var costoTotalReceta = obtenerCostoReceta(nombreReceta);
            var margen_de_utilidad = parseFloat($('#margen_de_utilidad').val()) || 0;
            var iva = parseFloat($('#iva').val()) || 0;
            var servicio = parseFloat($('#impuesto_de_servicio').val()) || 0;
            var envio = parseFloat($('#envio').val()) || 0;
            var totalEmpaques = calcularTotalesPorInsumo('#empaques_decoraciones-container', empaques, 'CantidadEmpaqueDecoracion', 'EmpaqueDecoracionSeleccionado');
            var totalImplementos = calcularTotalesPorInsumo('#implementos-container', implementos, 'CantidadImplemento', 'ImplementoSeleccionado');
            var totalSuministros = calcularTotalesPorInsumo('#suministros-container', suministros, 'Cantidadsuministro', 'SuministroSeleccionado');
            var costoSinMargenUtilidad = 100 - margen_de_utilidad;
            var costoConUtilidad = 0;
            if (costoSinMargenUtilidad > 0) {
                costoConUtilidad = costoTotalReceta / (costoSinMargenUtilidad / 100);
            }
            var precioFinal = costoConUtilidad + totalEmpaques + totalImplementos + totalSuministros + iva + servicio + envio;
            $('#precioFinalSugerido').text(precioFinal.toFixed(2));
        }

        function agregarFila(containerId, templateClass) {
            var container = document.getElementById(containerId);
            var nuevaFila = document.querySelector('.' + templateClass).cloneNode(true);
            nuevaFila.style.display = '';
            container.appendChild(nuevaFila);
        }

        function eliminarFila(boton) {
            var fila = boton.closest(".fila-insumo");
            if (fila && fila.parentElement.children.length > 1)
            {
                fila.remove();
            }
        }

        $(document).on('input change', '#nombre_receta, #margen_de_utilidad, #iva, #impuesto_de_servicio, #envio', calcularPrecioFinal);
        $(document).on('input change', '#empaques_decoraciones-container input, #empaques_decoraciones-container select', calcularPrecioFinal);
        $(document).on('input change', '#implementos-container input, #implementos-container select', calcularPrecioFinal);
        $(document).on('input change', '#suministros-container input, #suministros-container select', calcularPrecioFinal);
        $(document).ready(calcularPrecioFinal);
    </script>
}
